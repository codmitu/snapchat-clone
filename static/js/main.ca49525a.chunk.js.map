{"version":3,"sources":["components/firebase.js","features/appSlice.js","components/Chat.jsx","features/camSlice.js","components/Chats.jsx","components/images/logo.png","components/Login.jsx","components/Preview.jsx","components/View.jsx","components/WebCamCapture.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","st","storage","auth","provider","GoogleAuthProvider","appSlice","createSlice","name","initialState","user","selectedImage","reducers","login","state","action","payload","logout","selectImage","resetImage","actions","selectUser","app","selectSelectedImage","Chat","timestamp","id","profilePic","read","imageUrl","username","dispatch","useDispatch","history","useHistory","ChatContainer","onClick","collection","doc","set","merge","push","Avatar","src","Info","H4","P","date","Date","toDate","toUTCString","styled","section","h4","p","camSlice","camImage","setCamImage","resetCamImage","selectCamImage","cam","Chats","useState","snaps","setSnaps","useSelector","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","ChatsContainer","Header","signOut","ChatsSearch","Input","placeholder","type","Snaps","div","input","Login","LoginContainer","Wrapper","Img","logo","Button","variant","signInWithPopup","then","result","displayName","photoURL","uid","catch","error","alert","message","img","Preview","replace","PreviewContainer","Toolbar","Footer","uuid","ref","putString","on","console","log","child","getDownloadURL","url","add","FieldValue","serverTimestamp","H2","footer","h2","View","exit","ViewContainer","ViewTimer","isPlaying","duration","strokeWidth","size","colors","remainingTime","videoConstraints","width","height","facingMode","WebCamCapture","webCamRef","useRef","capture","useCallback","imageSrc","current","getScreenshot","Container","audio","screenshotFormat","App","onAuthStateChanged","authUser","AppContainer","basename","AppBody","AppBodyBackground","path","component","exact","main","store","configureStore","reducer","appReducer","camReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca49525a.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAxnTXnMxgolw314eMkRKZubPWLrn_IQrM\",\r\n    authDomain: \"linkedin-demo-7c68a.firebaseapp.com\",\r\n    projectId: \"linkedin-demo-7c68a\",\r\n    storageBucket: \"linkedin-demo-7c68a.appspot.com\",\r\n    messagingSenderId: \"266113936266\",\r\n    appId: \"1:266113936266:web:0373c6a50ce1b711cdb673\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nconst st = firebase.storage();\r\n\r\nconst auth = firebase.auth();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { db, st, auth, provider };","import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    user: null,\n    selectedImage: null\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n    selectImage: (state, action) => {\n      state.selectedImage = action.payload;\n    },\n    resetImage: (state) => {\n      state.selectedImage = null;\n    }\n  },\n});\n\nexport const { login, logout, selectImage, resetImage } = appSlice.actions;\n\nexport const selectUser = (state) => state.app.user;\nexport const selectSelectedImage = (state) => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport StopRoundedIcon from '@material-ui/icons/StopRounded';\r\nimport ReactTimeago from 'react-timeago';\r\nimport { selectImage } from '../features/appSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { db } from './firebase';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\nexport default function Chat({\r\n    timestamp, id, profilePic, read, imageUrl, username\r\n}) {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const open = () => {\r\n        if(!read) {\r\n            dispatch(selectImage(imageUrl))\r\n            db.collection('snaps').doc(id).set({\r\n                read: true\r\n            }, {merge: true})\r\n            history.push('/chats/view')\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <ChatContainer onClick={open}>\r\n            <Avatar src={profilePic}/>\r\n            <Info>\r\n                <H4>{username}</H4>\r\n                <P>{!read ? 'Tap to view - ' : ' '}<ReactTimeago date={new Date(timestamp?.toDate()).toUTCString()}/></P>\r\n            </Info>\r\n\r\n            {!read && <StopRoundedIcon/>}\r\n        </ChatContainer>\r\n    )\r\n}\r\n\r\nconst ChatContainer = styled.section`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 8px;\r\n    border: 1px solid whitesmoke;\r\n    cursor: pointer;\r\n    > div {\r\n        height: 35px;\r\n        width: 35px;\r\n    }\r\n    > svg {\r\n        color: crimson;\r\n    }\r\n    &:hover {\r\n            opacity: 0.8;\r\n    }\r\n`\r\nconst Info = styled.section`\r\n    padding-left: 5px;\r\n    flex: 1;\r\n`\r\nconst H4 = styled.h4`\r\n    font-size: 0.8rem;\r\n    font-weight: 500;\r\n`\r\nconst P = styled.p`\r\n    font-size: 0.7rem;\r\n`","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const camSlice = createSlice({\r\n    name: 'cam',\r\n    initialState: {\r\n        camImage: null\r\n    },\r\n    reducers: {\r\n        setCamImage: (state, action) => {\r\n            state.camImage = action.payload\r\n        },\r\n        resetCamImage: (state) => {\r\n            state.camImage = null\r\n        }\r\n    },\r\n});\r\n\r\nexport const { setCamImage, resetCamImage } = camSlice.actions;\r\n\r\nexport const selectCamImage = (state) => state.cam.camImage;\r\n\r\nexport default camSlice.reducer;\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport {auth, db} from './firebase';\r\nimport Chat from './Chat';\r\nimport { selectUser } from '../features/appSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { resetCamImage } from '../features/camSlice';\r\n\r\n\r\n\r\nexport default function Chats() {\r\n    const [snaps, setSnaps] = useState([])\r\n    const user = useSelector(selectUser)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n        return db.collection('snaps')\r\n        .orderBy('timestamp', 'desc')\r\n        .onSnapshot(snapshot => setSnaps(snapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            data: doc.data()\r\n        }))))\r\n    }, [])\r\n\r\n    const takeSnap = () => {\r\n        dispatch(resetCamImage())\r\n        history.push('/')\r\n    }\r\n\r\n\r\n    return (\r\n        <ChatsContainer>\r\n            <Header>\r\n                <Avatar src={user.profilePic} onClick={() => auth.signOut()}/>\r\n                <ChatsSearch>\r\n                    <SearchIcon/>\r\n                    <Input placeholder=\"Friends\" type=\"text\"/>\r\n                </ChatsSearch>\r\n\r\n                <ChatBubbleIcon/>\r\n            </Header>\r\n            <Snaps>\r\n                {\r\n                    snaps.map(({id, data: {profilePic, username, timestamp, imageUrl, read}}) => (\r\n                        <Chat \r\n                            key={id}\r\n                            id={id}\r\n                            username={username}\r\n                            timestamp={timestamp}\r\n                            imageUrl={imageUrl}\r\n                            read={read}\r\n                            profilePic={profilePic}\r\n                        />\r\n                    ))\r\n                }\r\n            </Snaps>\r\n\r\n            <RadioButtonUncheckedIcon onClick={takeSnap}/>\r\n        </ChatsContainer>\r\n    )\r\n}\r\n\r\nconst ChatsContainer = styled.section`\r\n    position: relative;\r\n    height: 400px;\r\n    width: 250px;\r\n    >svg {\r\n        font-size: 2rem;\r\n        position: absolute;\r\n        background-color: white;\r\n        border-radius: 50%;\r\n        color: gray;\r\n        cursor: pointer;\r\n        bottom: 0;\r\n        left: 50%;\r\n        transform: translate(-50%, 100%);\r\n        &:hover {\r\n            opacity: 0.8;\r\n        }\r\n    }\r\n`\r\nconst Header = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    background-color: #059ee0;\r\n    height: 50px;\r\n    >div {\r\n        height: 25px;\r\n        width: 25px;\r\n    }\r\n    >svg {\r\n        color: white;\r\n        font-size: 1.1rem;\r\n    }\r\n`\r\nconst ChatsSearch = styled.section`\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1;\r\n    padding-left: 8px;\r\n    >svg {\r\n        color: white;\r\n        font-size: 0.9rem;\r\n    }\r\n`\r\nconst Input = styled.input`\r\n    background-color: transparent;\r\n    border: none;\r\n    font-size: 0.8rem;\r\n    color: white;\r\n    &::placeholder {\r\n        color: white;\r\n        opacity: 1;\r\n    }\r\n`\r\nconst Snaps = styled.div`\r\n    height: 400px;\r\n    background-color: white;\r\n    box-shadow: 1px -7px 7px -6px rgba(0,0,0,0.44);\r\n    margin-top: -9px;\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n    overflow: scroll;\r\n    &::-webkit-scrollbar {\r\n        width: 0;\r\n    }\r\n`\r\n","export default __webpack_public_path__ + \"static/media/logo.0f94b43f.png\";","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport logo from './images/logo.png'\r\nimport {auth, provider} from './firebase'\r\nimport {login} from '../features/appSlice'\r\n\r\nexport default function Login() {\r\n    const dispatch = useDispatch();\r\n    \r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .then(result => {\r\n            dispatch(login({\r\n                username: result.user.displayName,\r\n                profilePic: result.user.photoURL,\r\n                id: result.user.uid,\r\n            }))\r\n        }).catch(error => alert(error.message))\r\n    }\r\n\r\n    return (\r\n        <LoginContainer>\r\n            <Wrapper>\r\n                <Img src={logo}/>\r\n                <Button variant=\"outlined\" onClick={signIn}>Sign in</Button>\r\n            </Wrapper>\r\n        </LoginContainer>\r\n    )\r\n}\r\n\r\nconst LoginContainer = styled.section`\r\n    background-color: #feff00;\r\n    display: grid;\r\n    place-items: center;\r\n    height: 100vh;\r\n`\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nconst Img = styled.img`\r\n    height: 300px;\r\n    object-fit: container;\r\n`\r\n","import styled  from 'styled-components'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { resetCamImage, selectCamImage } from '../features/camSlice'\r\nimport { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {v4 as uuid} from 'uuid';\r\nimport {db, st} from './firebase';\r\nimport firebase from 'firebase';\r\nimport { selectUser } from '../features/appSlice'\r\n\r\nexport default function Preview() {\r\n    const camImage = useSelector(selectCamImage)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const user = useSelector(selectUser)\r\n\r\n    \r\n    const closePreview = () => {\r\n        dispatch(resetCamImage())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!camImage) {\r\n            history.replace('/')\r\n        }\r\n    }, [camImage, history])\r\n\r\n    const sendPost = () => {\r\n        const id = uuid()\r\n        const uploadTask = st.ref(`snaps/${id}`).putString(camImage, 'data_url')\r\n        uploadTask.on('state_changed', null, (error) => {\r\n            console.log(error)\r\n        }, () => {\r\n            st.ref('snaps').child(id).getDownloadURL().then((url) => {\r\n                db.collection('snaps').add({\r\n                    imageUrl: url,\r\n                    username: 'Codmitu',\r\n                    read: false,\r\n                    profilePic: user.profilePic,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n                })\r\n                history.replace('/chats')\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <PreviewContainer>\r\n            <CloseIcon onClick={closePreview} />\r\n            <Toolbar>\r\n                <TextFieldsIcon />\r\n                <CreateIcon />\r\n                <NoteIcon />\r\n                <MusicNoteIcon />\r\n                <AttachFileIcon />\r\n                <CropIcon />\r\n                <TimerIcon />\r\n            </Toolbar>\r\n\r\n            <Img src={camImage} />\r\n\r\n            <Footer onClick={sendPost}>\r\n                <H2>Send now</H2>\r\n                <SendIcon/>\r\n            </Footer>\r\n        </PreviewContainer>\r\n    )\r\n}\r\n\r\nconst PreviewContainer = styled.section`\r\n    position: relative;\r\n    >svg {\r\n        position: absolute;\r\n        top: 0;\r\n        margin: 5px;\r\n        cursor: pointer;\r\n        color: white;\r\n    }\r\n`\r\nconst Toolbar = styled.div`\r\n    color: white;\r\n    position: absolute;\r\n    right: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 5px;\r\n    >svg {\r\n        font-size: 1.2rem;\r\n        margin-bottom: 8px;\r\n        cursor: pointer;\r\n    }\r\n`\r\nconst Img = styled.img`\r\n\r\n`\r\nconst Footer = styled.footer`\r\n    background-color: yellow;\r\n    color: black;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    border-radius: 30px;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    padding: 7px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    right: -25px;\r\n    transform: translate(-50%, -50%);\r\n    >svg {\r\n        font-size: 0.8rem;\r\n    }\r\n`\r\nconst H2 = styled.h2`\r\n    font-size: 0.5rem;\r\n    margin-right: 3px;\r\n`","import React, { useEffect } from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { selectSelectedImage } from '../features/appSlice'\r\n\r\nexport default function View() {\r\n    const selectedImage = useSelector(selectSelectedImage)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        if(!selectedImage) {\r\n            return exit();\r\n        }\r\n    }, [])\r\n\r\n    const exit = () => {\r\n        history.replace('/chats')\r\n    }\r\n\r\n    return (\r\n        <ViewContainer>\r\n            <Img src={selectedImage} onClick={exit} />\r\n            <ViewTimer>\r\n                <CountdownCircleTimer\r\n                    isPlaying\r\n                    duration={10}\r\n                    strokeWidth={6}\r\n                    size={50}\r\n                    colors={[\r\n                        ['#004777', 0.33],\r\n                        ['#F7B801', 0.33],\r\n                        ['#A30000', 0.33],\r\n                    ]}\r\n                >\r\n                    {({remainingTime}) => {\r\n                        if (remainingTime === 0) {\r\n                            exit();\r\n                        }\r\n\r\n                        return remainingTime\r\n                    }}\r\n                </CountdownCircleTimer>\r\n            </ViewTimer>\r\n        </ViewContainer>\r\n    )\r\n}\r\n\r\nconst ViewContainer = styled.section`\r\n    position: relative;\r\n`\r\nconst Img = styled.img`\r\n    cursor: pointer;\r\n    top: 0;\r\n    right: 0;\r\n`\r\nconst ViewTimer = styled.div`\r\n\r\n`","import React, { useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Webcam from 'react-webcam'\r\nimport RadioButtonUncheckedOutlinedIcon from '@material-ui/icons/RadioButtonUncheckedOutlined'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCamImage } from '../features/camSlice'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst videoConstraints = {\r\n    width: 252,\r\n    height: 440,\r\n    facingMode: 'user',\r\n}\r\n\r\n\r\nexport default function WebCamCapture() {\r\n    const webCamRef = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n    \r\n    const capture = useCallback(() => {\r\n        const imageSrc = webCamRef.current.getScreenshot()\r\n        dispatch(setCamImage(imageSrc))\r\n        history.push('/preview')\r\n    }, [webCamRef])\r\n\r\n    return (\r\n        <Container>\r\n            <Webcam\r\n                audio={false}\r\n                height={videoConstraints.height}\r\n                ref={webCamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={videoConstraints.width}\r\n                videoConstraints={videoConstraints}\r\n            />\r\n        <RadioButtonUncheckedOutlinedIcon onClick={capture} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.section`\r\n    position: relative;\r\n\r\n    >video {\r\n\r\n    }\r\n    >svg {\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        cursor: pointer;\r\n        color: white;\r\n    }\r\n`","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Chats from './components/Chats';\nimport { auth } from './components/firebase';\nimport Login from './components/Login';\nimport Preview from './components/Preview';\nimport View from './components/View';\nimport WebCamCapture from './components/WebCamCapture';\nimport { login, logout, selectUser } from './features/appSlice';\nimport logo from './components/images/logo.png'\n\n\nfunction App() {\n  const user = useSelector(selectUser)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(login({\n          username: authUser.displayName,\n          profilePic: authUser.photoURL,\n          id: authUser.uid\n        }))\n      } else {\n        dispatch(logout())\n      }\n    })\n  }, [])\n\n\n  return (\n    <AppContainer>\n      <Router basename=\"/snapchat-clone\">\n        {\n          !user ?\n            <Login /> :\n            <>\n              <Img src={logo} />\n              <AppBody>\n                <AppBodyBackground>\n                  <Switch>\n                    <Route path=\"/chats/view\" component={View} />\n                    <Route path=\"/chats\" component={Chats} />\n                    <Route path=\"/preview\" component={Preview} />\n                    <Route exact path=\"/\" component={WebCamCapture} />\n                  </Switch>\n                </AppBodyBackground>\n              </AppBody>\n            </>\n        }\n      </Router>\n    </AppContainer>\n  );\n}\n\nexport default App;\n\nconst AppContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: yellow;\n  min-height: 100vh;\n`\nconst AppBody = styled.div`\n  background: url(\"https://lh3.googleusercontent.com/proxy/9ujtJnbLysb2bL0BwcwT57m4UHgGO0bLqSfFGUFspM63AcfWbxHqutiKfn9OshN18uF1sOAIPVVw3mBap_e9E6BdksaJFoSg645YgMFnQ_ojq5zdPoJIc-WEaHhJxItCE6Q\")no-repeat top 0% left 47% /cover;\n  height: 400px;\n  padding:114px;\n`\nconst Img = styled.img`\n  height: 100px;\n  object-fit: contain;\n`\nconst AppBodyBackground = styled.div`\n  background-color: white;\n  height: 440px;\n  margin-top: -20px;\n`\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport camReducer from '../features/camSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    cam: camReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}